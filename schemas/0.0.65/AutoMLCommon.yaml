$schema: http://json-schema.org/draft-07/schema#
$id: http://azureml/sdk-2-0/AutoMLCommon.yaml

title: AutoMLComponent specification
description: 'A Generic Component that can run AutoML code in a pipeline or job.
  It exposes all the properties of the AutoML service'
type: object
properties:
  type:
    const: automl_common

  general:
    additionalProperties: false
    properties:
      task:
        enum: [classification, regression, forecasting]
        type: string
        description: The type of ML task to run. Values can be 'classification', 'regression', or 'forecasting' depending on the type of automated ML problem to solve.
      primary_metric:
        oneOf:
          - enum: ['AUC_weighted', 'accuracy', 'norm_macro_recall', 'average_precision_score_weighted', 'precision_score_weighted', 'spearman_correlation', 'normalized_root_mean_squared_error', 'r2_score', 'normalized_mean_absolute_error', 'normalized_root_mean_squared_log_error']
          - {$ref: '#definitions/InputValuePlaceholder'}
        description: The metric that Automated Machine Learning will optimize for model selection. Automated Machine Learning collects more metrics than it can optimize.
      enable_model_explainability:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: Whether to enable explaining the best AutoML model at the end of all AutoML training trials (children jobs). The default is True.
    required:
      - task

  limits:
    additionalProperties: false
    properties:
      max_total_trials:
        $ref: '#/definitions/IntegerOrPlaceholder'
        description: The maximum total number of different algorithm and parameter combinations (trials) to try during an automated ML experiment. If not specified, the default is 1000 trials. If using 'enable_early_termination' the number of trials used can be smaller.
      job_timeout_minutes:
        $ref: '#/definitions/NumberOrPlaceholder'
        description: Maximum amount of time in minutes that the whole AutoML experiment can take before the experiment terminates. This timeout includes setup, featurization and training runs but does not include the ensembling and model explainability runs at the end of the process since those actions need to happen once all the trials (children jobs) are done. If not specified, the default experiment's total timeout is 6 days (8,640 minutes). To specify a timeout less than or equal to 1 hour (60 minutes), make sure your dataset's size is not greater than 10,000,000 (rows times column) or an error results.
      max_concurrent_trials:
        $ref: '#/definitions/IntegerOrPlaceholder'
        description: Represents the maximum number of trials (children jobs) that would be executed in parallel. The default value is 1.
      max_cores_per_trial:
        $ref: '#/definitions/IntegerOrPlaceholder'
        description: The maximum number of threads to use for a given training trial (child job).
      job_exit_score:
        $ref: '#/definitions/NumberOrPlaceholder'
        description: Minimum target score for experiment. The experiment terminates after this score is reached. If not specified (no criteria), the experiment runs until no further progress is made on the primary metric or max_total_trials is reached.
      enable_early_termination:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: Whether to enable early termination if the score is not improving in the short term. The default is False.
      trial_timeout_minutes:
        $ref: '#/definitions/IntegerOrPlaceholder'
        description: Maximum time in minutes that each trial (child job) can run for before it terminates. If not specified, a value of 1 month or 43200 minutes is used.
      
  data:
    additionalProperties: false
    properties:
      training:
        additionalProperties: false
        properties:
          dataset:
            $ref: '#definitions/InputDataDefinition'
            description: The data to be used within the experiment. It should contain both training feature columns and a target column. the parameter main_data must always be provided
        required:
        - dataset        

      validation:
        additionalProperties: false
        properties:
          dataset:
            $ref: '#definitions/InputDataDefinition'
            description: The validation data to be used within the experiment. It should contain both training features and label column (optionally a sample weights column). If 'validation_dataset' is specified, then 'dataset' and 'target_column_name' parameters must be specified.
          validation_data_size:
            $ref: '#/definitions/NumberOrPlaceholder'
            description: What fraction of the data to hold out for validation when user validation data is not specified. This should be between 0.0 and 1.0 non-inclusive.
          n_cross_validations:
            $ref: '#/definitions/IntegerOrPlaceholder'
            description: How many cross validations to perform when user validation data is not specified.
          cv_split_column_names:
            $ref: '#/definitions/ArrayOfStrings'
            description: Columns to use for CVSPlit data.
      
      test:
        additionalProperties: False
        properties:
          dataset:
            $ref: '#definitions/InputDataDefinition'
            description: The test data to be used within the experiment.
          test_data_size:
            $ref: '#/definitions/NumberOrPlaceholder'
            description: What fraction of the data to hold out for test when user test dataset is not specified. This should be between 0.0 and 1.0 non-inclusive.
      target_column_name:
        $ref: '#/definitions/StringOrPlaceholder'
          description: The name of the column to target for predictions. It must always be specified. This parameter is applicable to 'dataset', 'validation_dataset' and 'test_dataset'.
      weight_column_name:
        $ref: '#/definitions/StringOrPlaceholder'
          description: The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down. If the input data doesn't have column names, column indices can be used instead, expressed as integers.
      required:        
        - target_column_name

  featurization:
    additionalProperties: false
    properties:
      featurization_config:
        oneOf:
          - enum: [auto, off]
            $ref: '#/definitions/StringOrPlaceholder'
          - {$ref: '#/definitions/custom_featurization_config'}
        description: auto / off / custom_featurization_config for whether featurization step should be done automatically or not, or whether customized featurization should be used. If the input data is sparse, featurization cannot be turned on.
      enable_dnn_featurization:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: If True, this parameter enables BERT DNN based featurization. Default value is False.

  forecasting:
    additionalProperties: false
    properties:
      forecasting_config:
        $ref: '#/definitions/forecasting_config'
        description: Time Series Forecasting model configuration parameters

  training:
    additionalProperties: false
    properties:
      blocked_training_algorithms:
        type: array
        items: {$ref: '#/definitions/StringOrPlaceholder'}
        description: A list of algorithms (base model) to ignore for an AutoML experiment.
      allowed_training_algorithms:
        type: array
        items: {$ref: '#/definitions/StringOrPlaceholder'}
        description: A list of algorithms (base model) to try in the multiple trials. If not specified, then all algorithms supported for the task are used minus any specified in blocked_training_algorithms.
      enable_dnn_training:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: If True, this parameter enables DNN based training like when using ForecastTCN neural network model. Default value is False.
      enable_onnx_compatible_models:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: Flag for enabling onnx compatible models.
      enable_stack_ensemble:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: Flag to enable stack ensemble.
      enable_vote_ensemble:
        $ref: '#/definitions/BooleanOrPlaceholder'
        description: Flag to enable voting ensemble.
      ensemble_model_download_timeout_minutes:
        $ref: '#/definitions/NumberOrPlaceholder'
        description: During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded. The default value is 5 minutes for downloading these models in parallel and there is no maximum timeout limit. Configure this parameter with a higher value than 300 secs, if more time is needed.
      stack_ensemble_settings:
        $ref: '#/definitions/stack_ensemble_settings'


  best_model_output:
    $ref: '#/definitions/OutputDataDefinition'
    
additionalProperties: false

definitions:

  OutputDataDefinition:
    oneOf:
    - type: string
    - { $ref: 'Job.yaml#/definitions/outputData' }

  InputDataDefinition:
    { $ref: 'Job.yaml#/definitions/inputData' }

  custom_featurization_config:
    description: Defines feature engineering configuration for automated machine learning experiments in Azure Machine Learning. 
    type: object
    additionalProperties: false
    properties:
      blocked_transformers:
        type: array
        description: A list of transformers to ignore when featurizing.
        items:
          enum: 
          - TextTargetEncoder
          - OneHotEncoder
          - CatTargetEncoder
          - TfIdf
          - WoETargetEncoder
          - LabelEncoder
          - WordEmbedding
          - NaiveBayes
          - CountVectorizer
          - HashOneHotEncoder               
      column_purposes:
        type: object
        description: A dictionary of column names and feature types used to update column purpose.
        patternProperties: {
        '.*': {type: string}
        }
      transformer_params:
        $ref: 'Job.yaml#/definitions/ArrayOfTransformerParamters'
  
  forecasting_config:
    description: Parameters needed to train Forecasting models in Azure Machine Learning.
    type: object
    additionalProperties: false
    properties:
      country_or_region_for_holidays:
        type: string
        description: The country/region used to generate holiday features. These should be ISO 3166 two-letter country/region code, for example 'US' or 'GB'. 
      forecast_horizon:
        type: integer
        description: The desired maximum forecast horizon in units of time-series frequency. The default value is 1. Units are based on the time interval of your training data, e.g., monthly, weekly that the forecaster should predict out.
      target_lags:
        $ref: '#/definitions/IntegerListOrIntegerOrString'
        description: The number of past periods to lag from the target column. Use 'auto' to use the automatic heuristic based lag.
      target_rolling_window_size:
        type: integer
        description: The number of past periods used to create a rolling window average of the target column. When forecasting, this parameter represents n historical periods to use to generate forecasted values, <= training set size. If omitted, n is the full training set size. Specify this parameter when you only want to consider a certain amount of history when training the model.
      time_column_name:
        type: string
        description: The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
      time_series_id_column_names:
        $ref: '#/definitions/StringListOrString'
        description: The names of columns used to group a timeseries. It can be used to create multiple series. If time_series_id_column_names is not defined, the data set is assumed to be one time-series.
      frequency:
        type: string
        description: Forecast frequency.
      feature_lags:
        type: string
        description: Flag for generating lags for the numeric features with 'auto' or None.
      seasonality:
        type: string
        description: Set time series seasonality as an integer multiple of the series frequency. If seasonality is set to 'auto', it will be inferred. If set to null, the time series is assumed non-seasonal which is equivalent to seasonality=1
      short_series_handling_config:
        enum: ['auto', 'pad', 'drop']
        type: string
        description: The metric that Automated Machine Learning will optimize for model selection. Automated Machine Learning collects more metrics than it can optimize.
      use_stl:
        type: string
        description: Configure STL Decomposition of the time-series target column. use_stl can take three values- null (default) - no stl decomposition, 'season' - only generate season component and season_trend - generate both season and trend components.
      target_aggregate_function:
        type: string
        description: The function to be used to aggregate the time series target column to conform to a user specified frequency. If the target_aggregation_function is set, but the freq parameter is not set, the error is raised. The possible target aggregation functions are- "sum", "max", "min" and "mean".
      validate_parameters:
        type: string
        description: Flag to indicate whether or no validate parameters.     
           
  IntegerListOrIntegerOrString:
    oneOf:
    - {$ref: '#definitions/ArrayOfIntegers'}
    - {type: integer}
    - {type: string}

  StringListOrString:
    oneOf:
    - {$ref: '#definitions/ArrayOfStrings'}
    - {type: string}

  ArrayOfIntegers:
    type: array
    items: {$ref: '#/definitions/IntegerOrPlaceholder'}

  ArrayOfStrings:
    type: array
    items: {$ref: '#/definitions/StringOrPlaceholder'}
  
  ArrayOfTransformerParamters:
    type: array
    items: {$ref: '#/definitions/tranformer_parameters'}

  NumberOrPlaceholder:
    oneOf:
    - {type: number}
    - {$ref: '#definitions/InputValuePlaceholder'}

  BooleanOrPlaceholder:
    oneOf:
    - {type: boolean}
    - {$ref: '#definitions/InputValuePlaceholder'}

  IntegerOrPlaceholder:
    oneOf:
    - {type: integer}
    - {$ref: '#definitions/InputValuePlaceholder'}

  StringOrPlaceholder:
    oneOf:
    - {type: string}
    - {$ref: '#definitions/InputValuePlaceholder'}
    - {$ref: '#definitions/InputPathPlaceholder'}

  InputPathPlaceholder:
    properties:
      $inputPath: {description: Name of the input., type: string}
    required: [$inputPath]
    type: object

  InputValuePlaceholder:
    properties:
      $inputValue: {description: Name of the input., type: string}
    required: [$inputValue]
    type: object

  OutputPathPlaceholder:
    properties:
      $outputPath: {description: Name of the output., type: string}
      selector: {const: best_run}
    required: [$outputPath]
    type: object

  OutputValuePlaceholder:
    properties:
      $outputValue: {description: Name of the output., type: string}
    required: [$outputValue]
    type: object

  StackEnsembleSettings:
    properties:
      stack_meta_learner_type:
        enum: [LogisticRegression, LogisticRegressionCV, LightGBMClassifier, ElasticNet, ElasticNetCV, LightGBMRegressor, LinearRegression]
        type: string
        description: The country/region used to generate holiday features. These should be ISO 3166 two-letter country/region code, for example 'US' or 'GB'. 
      stack_meta_learner_train_percentage:
        type: '#/definitions/NumberOrPlaceholder'
        description: The desired maximum forecast horizon in units of time-series frequency. The default value is 1. Units are based on the time interval of your training data, e.g., monthly, weekly that the forecaster should predict out.
      stack_meta_learner_kwargs:
        type: object
        description: Optional parameters to pass to the initializer of the meta-learner. These parameters and parameter types mirror the parameters and parameter types from the corresponding model constructor, and are forwarded to the model constructor.
        patternProperties: {
        '.*': {type: string}
        }

  TransformerParamters:
    properties:
      name:
        type: string
        description: Transformer name "Imputer"/"HotOneEncoder"/"tfidf"
      fields:
        type: '#/definitions/ArrayOfStrings'
        description: The desired maximum forecast horizon in units of time-series frequency. The default value is 1. Units are based on the time interval of your training data, e.g., monthly, weekly that the forecaster should predict out.
      strategy:
        enum: ['median', 'ffill', 'mean', 'most_frequent']
        type: string
      fill_value:
        $ref: '#/definitions/NumberOrPlaceholder'
      kwargs_input:
        type: object
        description: Optional parameters to pass to the constructor of the transformer.
        patternProperties: {
        '.*': {type: string}
        }