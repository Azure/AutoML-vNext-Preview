# ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# ---------------------------------------------------------

parameters:
- name: pythonVersion
  displayName: Python Version
  type: string
  default: 3.7
  values:
    - 3.7
    - 3.8
    - 3.9
# Defines workspace lifetime
# Workspaces are used for workspaceWindowSeconds
# and optionally deleted after another
# workspaceWindowSeconds have elapsed
- name: workspaceWindowSeconds
  displayName: Workspace Active Window (seconds)
  type: number
  default: 86000 # Just less than one day
  # Specifies whether to remove workspaces
  # older than 2*worksapceWindowSeconds
- name: oldWorkspaceHandling
  displayName: How to handle old workspaces
  type: string
  default: Cull
  values:
    - Cull
    - Keep
  # Specifies the region in which to create
  # any new workspace
- name: workspaceLocation
  displayName: Workspace Location
  type: string
  default: EastUS
  values:
    - CentralUSEUAP
    - EastUS
    - EastUS2EUAP
    - WestUS
- name: cliSource
  displayName: Installation source for CLI
  type: string
  default: LatestRelease
  values:
    - LatestRelease
    - LatestDev
- name: sdkSource
  displayName: Installation source for Python SDK
  type: string
  default: LatestRelease
  values:
    - LatestRelease
    - LatestDev
- name: subscriptionName
  type: string
- name: configFileDirectory
  type: string
  default: configFiles
- name: configFileArtifact
  type: string
  default: WorkspaceConfiguration

steps:
- checkout: self
  fetchDepth: 1
  clean: true

- task: UsePythonVersion@0
  displayName: "Use Python ${{parameters.pythonVersion}}"
  inputs:
    versionSpec: ${{parameters.pythonVersion}}

- script: |
    echo "##[section]Upgrading pip and setuptools..."
    pip install --upgrade pip setuptools wheel
  failOnStderr: true
  displayName: Install pip etc.

- task: PowerShell@2
  inputs:
    targetType: filePath
    filepath: scripts/Run-Pip.ps1
    arguments: -sdkVersionSelect ${{parameters.sdkSource}}
    displayName: Install pip requirements

- powershell: |
    Set-PSDebug -Trace 0
    Install-Module powershell-yaml -Scope CurrentUser -Force
  displayName: Install YAML extension for Powershell

- task: AzureCLI@2
  displayName: Install AzureML CLI v2
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Install-CLIv2.ps1
    failOnStandardError: false
    arguments: -sdkVersionSelect ${{parameters.cliSource}}

- task: AzureCLI@2
  displayName: Obtain Workspace
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Obtain-Workspace.ps1
    failOnStandardError: false # Since the new CLI writes stuff there
  env:
    OLD_WORKSPACES_HANDLING: ${{parameters.oldWorkspaceHandling}}
    WORKSPACE_LOCATION: ${{parameters.workspaceLocation}}
    WORKSPACE_WINDOW_SECONDS: ${{parameters.workspaceWindowSeconds}}

- task: AzureCLI@2
  displayName: Configure storage account access
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Configure-StorageAccount.ps1
    failOnStandardError: false # Since the new CLI writes stuff there
    addSpnToEnvironment: true


- powershell: |
    mkdir ${{parameters.configFileDirectory}}
    cp workspace.yaml ${{parameters.configFileDirectory}}
    cp config.json ${{parameters.configFileDirectory}}
    cp component_config.json ${{parameters.configFileDirectory}}
  displayName: Copy config files to separate directory

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: ${{parameters.configFileDirectory}}
    artifactName: ${{parameters.configFileArtifact}}

- task: AzureCLI@2
  displayName: Create Compute
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Create-Compute.ps1
    failOnStandardError: false # Since the new CLI writes stuff there

- task: AzureCLI@2
  displayName: Register Responsible AI Components
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Register-AzureML.ps1
    arguments: src/responsibleai/registration_config.json
    failOnStandardError: false # Since the new CLI writes stuff there

- task: AzureCLI@2
  displayName: Register Adult Dataset
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Register-AzureML.ps1
    arguments: test/data/adult/registration_config.json
    failOnStandardError: false # Since the new CLI writes stuff there

- task: AzureCLI@2
  displayName: Register Boston Dataset
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Register-AzureML.ps1
    arguments: test/data/boston/registration_config.json
    failOnStandardError: false # Since the new CLI writes stuff there

- task: AzureCLI@2
  displayName: Register Test-only components
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Register-AzureML.ps1
    arguments: test/components/registration_config.json
    failOnStandardError: false # Since the new CLI writes stuff there

- task: AzureCLI@2
  displayName: Run tests
  inputs:
    azureSubscription: "${{parameters.subscriptionName}}"
    addSpnToEnvironment: true
    scriptType: pscore
    scriptLocation: scriptPath
    scriptPath: scripts/Run-Tests.ps1
    failOnStandardError: false # Since the new CLI writes stuff there

- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testResultsFormat: JUnit
    testResultsFiles: "**/junit.xml"
    searchFolder: "$(System.DefaultWorkingDirectory)"
  condition: always()
